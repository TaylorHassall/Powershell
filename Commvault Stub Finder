/<#

.SYNOPSIS
  Powershell script to get file size and size on disk of all files
  in a directory.
  
.DESCRIPTION
  This PowerShell script gets file size and size on disk in bytes
  of all files in a directory, and displays the full path of file, 
  without including the filename in the path that "FullName" may 
  provide
  
.PARAMETER <path>
   Directory path of the files to check. If this parameter is not
   specified the default value is current directory. Ensure you 
   wrap the path in double quotes if 
 
.NOTES
  Version:        1.21
  Author:         Open Tech Guides
  Creation Date:  06-Feb-2017
  Last Modified: 06/09/2022
 
.LINK
    www.opentechguides.com
    https://www.opentechguides.com/how-to/article/powershell/133/size-on-disk-ps.html
    
.EXAMPLE
  Get-FileSizeOnDisk c:\myfolder
  Get-FileSizeOnDisk "\\Server01\Datashare01\"

#>

param (
 [string]$root='.'
)
Write-Host "$root is the CSV Location"

$source = @"
 using System;
 using System.Runtime.InteropServices;
 using System.ComponentModel;
 using System.IO;

 namespace Win32
  {
    
    public class Disk {
	
    [DllImport("kernel32.dll")]
    static extern uint GetCompressedFileSizeW([In, MarshalAs(UnmanagedType.LPWStr)] string lpFileName,
    [Out, MarshalAs(UnmanagedType.U4)] out uint lpFileSizeHigh);	
        
    public static ulong GetSizeOnDisk(string filename)
    {
      uint HighOrderSize;
      uint LowOrderSize;
      ulong size;

      FileInfo file = new FileInfo(filename);
      LowOrderSize = GetCompressedFileSizeW(file.FullName, out HighOrderSize);

      if (HighOrderSize == 0 && LowOrderSize == 0xffffffff)
       {
	 throw new Win32Exception(Marshal.GetLastWin32Error());
      }
      else { 
	 size = ((ulong)HighOrderSize << 32) + LowOrderSize;
	 return size;
       }
    }
  }
}

"@

Add-Type -TypeDefinition $source

$result = @()

$SearchPaths = Import-Csv -path $root
foreach ($Line in $SearchPaths) {
  Write-host "$Line"
  Write-host "$Line.Location"
  Get-ChildItem -Recurse | Where-Object{-not $_.PSIsContainer -and $_.Attributes -eq 'Archive, SparseFile, RepairsePoint, Offline'} | Foreach-Object{
  $Path = Split-Path -path $FullPath
  $size = [Win32.Disk]::GetSizeOnDisk($_.FullName)
  $obj = New-Object PSObject
  Add-Member -InputObject $obj -MemberType NoteProperty -Name "Path" -Value $Path
  Add-Member -InputObject $obj -MemberType NoteProperty -Name "File Name" -Value $_.Name
  Add-Member -InputObject $obj -MemberType NoteProperty -Name "Size" -Value $_.Length
  Add-Member -InputObject $obj -MemberType NoteProperty -Name "Size on Disk" -Value $size
  Add-Member -InputObject $obj -MemberType NoteProperty -Name "Creation Time" -Value $_.CreationTime
  Add-Member -InputObject $obj -MemberType NoteProperty -Name "Last Modified Time" -Value $_.LastWriteTime
  Add-Member -InputObject $obj -MemberType NoteProperty -Name "Last Accessed Time" -Value $_.LastAccessTime
  $obj | export-csv "C:\Temp\outputfile.csv" -Append
  }
}
Write-Host "Script has completed. Please investigate Logfile to find files required."
