<#

.SYNOPSIS
  Powershell script to get file size and size on disk of all files
  in a directory.
  
.DESCRIPTION
  This PowerShell script gets file size and size on disk in bytes
  of all files in a directory, and displays the full path of file, 
  without including the filename in the path that "FullName" may 
  provide
  
  Intially used to find Stub Files from Commvault Backup Agent.
  Uses attributes 'Archive, SparseFile, ReparsePoint, Offline' to
  determine if the file is a stub and then export the file name 
  and path to an excel file.
  
.PARAMETER <path>
   Directory path of the files to check. If this parameter is not
   specified the default value is current directory. Ensure you 
   wrap the path in double quotes if the path has spaces, or is
   a network path.
 
.NOTES
  Version:        1.2
  Author:         Taylor Hassall
  Creation Date:  28-MAR-2022
  Last Modified: 03/05/2022
 
.LINK
    www.opentechguides.com
    https://www.opentechguides.com/how-to/article/powershell/133/size-on-disk-ps.html
    
.EXAMPLE
  Get-FileSizeOnDisk c:\myfolder
  Get-FileSizeOnDisk "\\Server01\Datashare01\"

#>
   

param (
 [string]$root='.'
)


$source = @"
 using System;
 using System.Runtime.InteropServices;
 using System.ComponentModel;
 using System.IO;

 namespace Win32
  {
    
    public class Disk {
	
    [DllImport("kernel32.dll")]
    static extern uint GetCompressedFileSizeW([In, MarshalAs(UnmanagedType.LPWStr)] string lpFileName,
    [Out, MarshalAs(UnmanagedType.U4)] out uint lpFileSizeHigh);	
        
    public static ulong GetSizeOnDisk(string filename)
    {
      uint HighOrderSize;
      uint LowOrderSize;
      ulong size;

      FileInfo file = new FileInfo(filename);
      LowOrderSize = GetCompressedFileSizeW(file.FullName, out HighOrderSize);

      if (HighOrderSize == 0 && LowOrderSize == 0xffffffff)
       {
	 throw new Win32Exception(Marshal.GetLastWin32Error());
      }
      else { 
	 size = ((ulong)HighOrderSize << 32) + LowOrderSize;
	 return size;
       }
    }
  }
}

"@

Add-Type -TypeDefinition $source

$result = @()

Get-ChildItem $root -Recurse | Where-Object { -not $_.PSIsContainer -and $_.Attributes -eq 'Archive, SparseFile, ReparsePoint, Offline'} | Foreach-Object {
  
    $FullPath = $_.FullName
    $Path = Split-Path -path $FullPath
    $size = [Win32.Disk]::GetSizeOnDisk($_.FullName)
    $obj = New-Object PSObject
    Add-Member -InputObject $obj -MemberType NoteProperty -Name "Path" -Value $Path
    Add-Member -InputObject $obj -MemberType NoteProperty -Name "File Name" -Value $_.Name
    Add-Member -InputObject $obj -MemberType NoteProperty -Name "Size" -Value $_.Length
    Add-Member -InputObject $obj -MemberType NoteProperty -Name "Size on Disk" -Value $size
    $obj | export-csv "C:\Temp\outputfile.csv" -Append

}
Write-Host "Script has completed. Please investigate Logfile to find files required."
